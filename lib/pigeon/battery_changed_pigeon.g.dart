// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class NativeBatteryInfo {
  NativeBatteryInfo({
    this.batteryLevel,
    this.batteryTemperature,
    this.voltage,
    this.currentNow,
    this.avgCurrent,
    this.batteryLow,
    this.batteryPresent,
    this.batteryStatus,
    this.chargePlug,
    this.batteryHealth,
  });

  int? batteryLevel;

  int? batteryTemperature;

  int? voltage;

  int? currentNow;

  int? avgCurrent;

  bool? batteryLow;

  bool? batteryPresent;

  String? batteryStatus;

  String? chargePlug;

  String? batteryHealth;

  Object encode() {
    return <Object?>[
      batteryLevel,
      batteryTemperature,
      voltage,
      currentNow,
      avgCurrent,
      batteryLow,
      batteryPresent,
      batteryStatus,
      chargePlug,
      batteryHealth,
    ];
  }

  static NativeBatteryInfo decode(Object result) {
    result as List<Object?>;
    return NativeBatteryInfo(
      batteryLevel: result[0] as int?,
      batteryTemperature: result[1] as int?,
      voltage: result[2] as int?,
      currentNow: result[3] as int?,
      avgCurrent: result[4] as int?,
      batteryLow: result[5] as bool?,
      batteryPresent: result[6] as bool?,
      batteryStatus: result[7] as String?,
      chargePlug: result[8] as String?,
      batteryHealth: result[9] as String?,
    );
  }
}

class _BatteryChangedPigeonCodec extends StandardMessageCodec {
  const _BatteryChangedPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeBatteryInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return NativeBatteryInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class BatteryChangedPigeon {
  static const MessageCodec<Object?> codec = _BatteryChangedPigeonCodec();

  void nativeSendMessage(NativeBatteryInfo info);

  static void setup(BatteryChangedPigeon? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BatteryChangedPigeon.nativeSendMessage', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.BatteryChangedPigeon.nativeSendMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final NativeBatteryInfo? arg_info = (args[0] as NativeBatteryInfo?);
          assert(arg_info != null,
              'Argument for dev.flutter.pigeon.BatteryChangedPigeon.nativeSendMessage was null, expected non-null NativeBatteryInfo.');
          api.nativeSendMessage(arg_info!);
          return;
        });
      }
    }
  }
}
